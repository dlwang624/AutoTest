package com.utils.tools;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.czy.entity.Project;
import org.czy.entity.Qcdb;
import org.czy.entity.TestSumReport;

import com.utils.db.DB2Factory;

public class TestReportdbTools {

	public TestReportdbTools() {
		map = new HashMap<Integer, List<List<String>>>();
		ts = new TestSumReport();
	}

	private Map<Integer, List<List<String>>> map;

	private TestSumReport ts;

	public Map<Integer, List<List<String>>> getMap() {
		return map;
	}

	public void setMap(Map<Integer, List<List<String>>> map) {
		this.map = map;
	}

	public TestSumReport getTs() {
		return ts;
	}

	public void setTs(TestSumReport ts) {
		this.ts = ts;
	}

	public void getTableData(int id, Qcdb db) throws Exception {
		List<List<String>> rows = map.get(3) != null ? map.get(3) : new ArrayList<List<String>>();
		List<List<String>> rowsPostpondBug = map.get(4) != null ? map.get(4) : new ArrayList<List<String>>();
		;
		Connection conn = null;
		int Bugcount = ts.getFailCount();
		int PostpondBugCount = ts.getFailLeaveOut();
		int passnum = ts.getPassnum(), num = ts.getNum();
		int urgent = ts.getUrgent();
		int veryHigh = ts.getVeryHigh();
		int high = ts.getHigh();
		int medium = ts.getMedium();
		int low = ts.getLow();
		int execTestCount = ts.getExecTestCount();
		List<String> list = new ArrayList<String>();
		// 测试执行情况
		String sqlTableData = "SELECT e.n4,e.n6, e.n1,e.n2,f.RN_RUN_NAME,f.RN_STATUS FROM (SELECT t.TS_NAME  AS n1,t.TS_STEPS AS n2,c.CYID AS n3,c.CY AS n4,T.TS_TEST_ID AS n5,d.TC_USER_01 AS n6 FROM td.TEST T, "
				+ "td.TESTCYCL d,( SELECT b.CY_CYCLE_ID AS CYID,b.CY_CYCLE AS CY FROM td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID ="
				+ "(select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ " ) AND a.CF_ITEM_ID = b.CY_FOLDER_ID)C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID)e,td.RUN f WHERE e.n3=f.RN_CYCLE_ID and e.n5 = f.RN_TEST_ID";
		

		
		// 遗留缺陷详情
		String sqlPostpondBug = "SELECT LN_BUG_ID,BG_SUMMARY,BG_SEVERITY FROM td.LINK L,td.BUG B WHERE L.LN_ENTITY_TYPE = 'STEP' AND L.LN_ENTITY_ID IN "
				+ "(SELECT T.ST_ID FROM td.STEP T WHERE T.ST_RUN_ID IN ( SELECT   f.RN_RUN_ID FROM  ( "
				+ " SELECT       t.TS_NAME    AS n1,  t.TS_STEPS   AS n2,  c.CYID       AS n3,      c.CY         AS n4, T.TS_TEST_ID AS n5    FROM      td.TEST T,     "
				+ " td.TESTCYCL d,(SELECT b.CY_CYCLE_ID AS CYID, b.CY_CYCLE AS CY  FROM 	 td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID in"
				+ " (select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ ") AND a.CF_ITEM_ID = b.CY_FOLDER_ID )C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID) e, td.RUN f WHERE  e.n3   =f.RN_CYCLE_ID AND e.n5 = f.RN_TEST_ID) AND T.ST_STATUS = 'failed') AND L.LN_BUG_ID=B.BG_BUG_ID AND  B.BG_STATUS='Postpond'";
		// Bug总数
		String sqlButCount = "SELECT COUNT(0) FROM td.LINK L,td.BUG B WHERE L.LN_ENTITY_TYPE = 'STEP' AND L.LN_ENTITY_ID IN "
				+ "(SELECT T.ST_ID FROM td.STEP T WHERE T.ST_RUN_ID IN ( SELECT   f.RN_RUN_ID FROM  ( "
				+ " SELECT       t.TS_NAME    AS n1,  t.TS_STEPS   AS n2,  c.CYID       AS n3,      c.CY         AS n4, T.TS_TEST_ID AS n5    FROM      td.TEST T,     "
				+ " td.TESTCYCL d,(SELECT b.CY_CYCLE_ID AS CYID, b.CY_CYCLE AS CY  FROM 	 td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID in"
				+ " (select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ ") AND a.CF_ITEM_ID = b.CY_FOLDER_ID )C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID) e, td.RUN f WHERE  e.n3   =f.RN_CYCLE_ID AND e.n5 = f.RN_TEST_ID) AND T.ST_STATUS = 'failed') AND L.LN_BUG_ID=B.BG_BUG_ID";
		// 遗留缺陷总数
		String sqlPostpondBugCount = "SELECT COUNT(*) FROM td.LINK L,td.BUG B WHERE L.LN_ENTITY_TYPE = 'STEP' AND L.LN_ENTITY_ID IN (SELECT T.ST_ID FROM td.STEP T WHERE T.ST_RUN_ID IN "
				+ "( SELECT   f.RN_RUN_ID FROM  (  SELECT       t.TS_NAME    AS n1,  t.TS_STEPS   AS n2,  c.CYID       AS n3,      c.CY         AS n4, T.TS_TEST_ID AS n5  "
				+ "  FROM      td.TEST T,      td.TESTCYCL d,(SELECT b.CY_CYCLE_ID AS CYID, b.CY_CYCLE AS CY  FROM	 td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID in "
				+ "(select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ ") AND a.CF_ITEM_ID = b.CY_FOLDER_ID )C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID) e, td.RUN f WHERE  e.n3   =f.RN_CYCLE_ID AND e.n5 = f.RN_TEST_ID) AND T.ST_STATUS = 'failed') AND L.LN_BUG_ID=B.BG_BUG_ID AND  B.BG_STATUS='Postpond'";
		// 缺陷严重等级占比
		String sqlBugSeverity = "SELECT BG_SEVERITY FROM td.LINK L,td.BUG B WHERE L.LN_ENTITY_TYPE = 'STEP' AND L.LN_ENTITY_ID IN (SELECT T.ST_ID FROM td.STEP T WHERE T.ST_RUN_ID IN"
				+ " ( SELECT   f.RN_RUN_ID FROM (  SELECT       t.TS_NAME    AS n1,  t.TS_STEPS   AS n2,  c.CYID       AS n3,      c.CY         AS n4, T.TS_TEST_ID AS n5  "
				+ "  FROM     td.TEST T,      td.TESTCYCL d,(SELECT b.CY_CYCLE_ID AS CYID, b.CY_CYCLE AS CY  FROM	 td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID in"
				+ " (select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ ") AND a.CF_ITEM_ID = b.CY_FOLDER_ID )C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID) e, td.RUN f WHERE  e.n3   =f.RN_CYCLE_ID AND e.n5 = f.RN_TEST_ID) AND T.ST_STATUS = 'failed') AND L.LN_BUG_ID=B.BG_BUG_ID";

		// 测试用例数getexecTestCount
		String sqlexecTestCount = "SELECT e.n1 FROM (SELECT t.TS_NAME  AS n1,t.TS_STEPS AS n2,c.CYID AS n3,c.CY AS n4,T.TS_TEST_ID AS n5 FROM td.TEST T, td.TESTCYCL d,"
				+ "( SELECT b.CY_CYCLE_ID AS CYID,b.CY_CYCLE AS CY FROM td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID ="
				+ "(select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ ") AND a.CF_ITEM_ID = b.CY_FOLDER_ID) C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID)e,td.RUN f WHERE e.n3=f.RN_CYCLE_ID and e.n5 = f.RN_TEST_ID";
		// 测试用例执行通过率
		String sqlsuccessRate = "SELECT t.TS_NAME,t.TS_CREATION_DATE,T.TS_EXEC_STATUS FROM td.TEST T, td.TESTCYCL d,"
				+ "( SELECT b.CY_CYCLE_ID AS CYID,b.CY_CYCLE AS CY FROM td.CYCL_FOLD a,td.CYCLE b WHERE a.CF_ITEM_ID ="
				+ " (select a.CF_ITEM_ID from td.CYCL_FOLD a where a.CF_ITEM_ID = " + id
				+ ") AND a.CF_ITEM_ID = b.CY_FOLDER_ID) C WHERE d.TC_TEST_ID=t.TS_TEST_ID AND C.CYID = d.TC_CYCLE_ID";

		try {
			conn = new DB2Factory(db).getDb();

			PreparedStatement prepTableData = conn.prepareStatement(sqlTableData);
			prepTableData.executeBatch();
			ResultSet rsTableData = prepTableData.executeQuery();
			while (rsTableData.next()) {
				List<String> cols = new ArrayList<String>();
				cols.add(rsTableData.getString("n4"));
				cols.add(rsTableData.getString("n6"));
				cols.add(rsTableData.getString("n1"));
				cols.add(rsTableData.getString("n2"));
				cols.add(rsTableData.getString("RN_RUN_NAME"));
				cols.add(rsTableData.getString("RN_STATUS"));

				rows.add(cols);
			}
			map.put(3, rows);

			// 遗留缺陷详情
			PreparedStatement prepPostpondBug = conn.prepareStatement(sqlPostpondBug);
			prepPostpondBug.executeBatch();
			ResultSet rsPostpondBug = prepPostpondBug.executeQuery();
			while (rsPostpondBug.next()) {
				List<String> cols = new ArrayList<String>();
				cols.add(rsPostpondBug.getString("LN_BUG_ID"));
				cols.add(rsPostpondBug.getString("BG_SUMMARY"));
				cols.add(rsPostpondBug.getString("BG_SEVERITY"));
				rowsPostpondBug.add(cols);
			}
			map.put(4, rowsPostpondBug);

			// Bug总数
			PreparedStatement prepButCount = conn.prepareStatement(sqlButCount);
			prepButCount.executeBatch();
			ResultSet rsButCount = prepButCount.executeQuery();

			while (rsButCount.next()) {
				Bugcount += rsButCount.getInt(1);
			}
			ts.setFailCount(Bugcount);

			// 遗留缺陷总数
			PreparedStatement prepPostpondBugCount = conn.prepareStatement(sqlPostpondBugCount);
			prepPostpondBugCount.executeBatch();
			ResultSet rsPostpondBugCount = prepPostpondBugCount.executeQuery();

			while (rsPostpondBugCount.next()) {
				PostpondBugCount += rsPostpondBugCount.getInt(1);
			}
			ts.setFailLeaveOut(PostpondBugCount);

			// 缺陷严重等级占比
			PreparedStatement prepBugSeverity = conn.prepareStatement(sqlBugSeverity);
			prepBugSeverity.executeBatch();
			ResultSet rsBugSeverity = prepBugSeverity.executeQuery();

			while (rsBugSeverity.next()) {

				list.add(rsBugSeverity.getString("BG_SEVERITY"));
			}

			for (int j = 0; j < list.size(); j++) {
				if ((list.get(j).toString()).contains("1-Low")) {
					low++;
				} else if ((list.get(j).toString()).contains("2-Medium")) {
					medium++;
				} else if ((list.get(j).toString()).contains("3-High")) {
					high++;
				} else if ((list.get(j).toString()).contains("4-Very High")) {
					veryHigh++;
				} else {
					urgent++;
				}

			}
			ts.setUrgent(urgent);
			ts.setVeryHigh(veryHigh);
			ts.setHigh(high);
			ts.setMedium(medium);
			ts.setLow(low);

			// 测试用例数
			Set<String> list1 = new HashSet<String>();
			PreparedStatement prepTestCount = conn.prepareStatement(sqlexecTestCount);
			prepTestCount.executeBatch();
			ResultSet rsexecTestCount = prepTestCount.executeQuery();

			while (rsexecTestCount.next()) {
				list1.add(rsexecTestCount.getString("n1"));
			}
			execTestCount += list1.size();
			ts.setExecTestCount(execTestCount);

			// 测试用例执行通过率

			List<String> list3 = new ArrayList<String>();
			PreparedStatement prepsuccessRate = conn.prepareStatement(sqlsuccessRate);
			prepsuccessRate.executeBatch();
			ResultSet rssuccessRate = prepsuccessRate.executeQuery();

			while (rssuccessRate.next()) {
				list3.add(rssuccessRate.getString("TS_EXEC_STATUS"));
			}
			for (int i = 0; i < list3.size(); i++) {
				String TS_EXEC_STATUS = list3.get(i).toString();
				if (TS_EXEC_STATUS.equals("Passed")) {
					passnum++;

				}
			}
			num += list3.size();
			ts.setNum(num);
			ts.setPassnum(passnum);

		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {
			throw new Exception(e);
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	// 获取率

	public void getRate() {
		int failcount = ts.getFailCount();
		int failleave = ts.getFailLeaveOut();
		int passnum = ts.getPassnum(), num = ts.getNum();
		int urgent = ts.getUrgent();
		int veryHigh = ts.getVeryHigh();
		int high = ts.getHigh();
		int medium = ts.getMedium();
		int low = ts.getLow();

		float rate1 = 0;
		if (failcount != 0) {
			rate1 = (failcount - failleave) / (float) failcount;
		}
		ts.setFailRate(rate1);

		float rate2 = 0;
		if (urgent + veryHigh + high + low + medium != 0) {
			rate2 = (urgent + veryHigh + high) / (float) (urgent + veryHigh + high + low + medium);
		}
		ts.setRate(rate2);

		float rate3 = 0;
		if (num != 0) {
			rate3 = passnum / (float) num;
		}
		ts.setSuccessRate(rate3);
	}

	// 获得父文件夹
	public List<Project> get_fid(Qcdb db, int id) {
		Connection conn = null;
		List<Project> list = new ArrayList<Project>();
		try {

			conn = new DB2Factory(db).getDb();
			String sql = "select CF_ITEM_ID,CF_ITEM_NAME from td.CYCL_FOLD a where a.CF_FATHER_ID =" + id;
			PreparedStatement prep = conn.prepareStatement(sql);
			prep.executeBatch();
			ResultSet rs = prep.executeQuery();
			while (rs.next()) {
				Project pro = new Project();
				pro.setProjectid(rs.getString("CF_ITEM_ID"));
				pro.setName(rs.getString("CF_ITEM_NAME"));
				list.add(pro);
			}
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return list;

	}

}
